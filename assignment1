#!/usr/bin/bash
#copy the data into our directory and use the fastqc perform a quality check
cp -r /localdisk/data/BPSM/Assignment1/fastq   ~/Assignment1
mkdir fastqcresult
for file in  ~/Assignment1/fastq/*.fq.gz
do
fastqc -o ./fastqcresult $file
done

#unzip the output file
mkdir fastqcresultunzip
for file in ~/Assignment1/fastqcresult/*_fastqc.zip
do
unzip $file -d  ./fastqcresultunzip
done

#assess the quality based on the output files

for file2 in ~/Assignment1/fastqcresultunzip/*_fastqc
do
grep -E "Filename|Total Sequences|Sequences flagged as poor quality|Sequence length|%GC" $file2/fastqc_data.txt  >>assesment.txt
awk 'BEGIN{FS="\t";}
{
if($1 =="WARN")
{
print $0;
if($2 == "Per base sequence quality")
{print "Any base quality is below 10 or the median is less than 25,"}
if($2 == "Per sequence quality scores")
{print "Peak value is less than 27,error_rate 0.2%.Some of the sequencing data is of poor quality"}
if($2 == "Per base sequence content")
{print "The difference between A/T ratio and G/C ratio at any position is more than 10%"}
if($2 == "Per sequence GC content")
{print "The GC content at any position deviates from the mean by 5%"}
if($2 == "Per base N content")
{print "The rate of unrecognizable bases in each position of all reads exceeds 5%"}
if($2 == "Sequence Length Distribution")
{print "Inconsistent reads length"}
if($2 == "Sequence Duplication Levels")
{print "Non-unique reads account for more than 20% of the total"}
if($2 == "Overrepresented sequences")
{print "over-represented reads exceed the total by 0.1%"}
if($2 == "Adapter Content")
{print "pay _attention_to the adapter sequence"}
}
if($1 =="FAIL"){
print $0;
if($2 == "Per base sequence quality")
{print "Any base quality is below 5 or the median is less than 20"}
if($2 == "Per sequence quality scores")
{print "Peak value is less than 20,error_rate 0.1%.Some of the sequencing data is of poor quality"}
if($2 == "Per base sequence content")
{print "The difference between A/T ratio and G/C ratio at any position is more than 20%"}
if($2 == "Per sequence GC content")
{print "The GC content at any position deviates from the mean by 10%"}
if($2 == "Per base N content")
{print "The rate of unrecognizable bases in each position of all reads exceeds 20%"}
if($2 == "Sequence Length Distribution")
{print "length=0"}
if($2 == "Sequence Duplication Levels")
{print "Non-unique reads account for more than 50% of the total"}
if($2 == "Overrepresented sequences")
{print "over-represented reads exceed the total by 1%"}
if($2 == "Adapter Content")
{print "pay _attention_to the adapter sequence"}
}
}' $file2/summary.txt >>assesment.txt
echo -e "\n" >>assesment.txt
done

#build the database before the bowtie2
mkdir bowtie2
cp  /localdisk/data/BPSM/Assignment1/Tbb_genome/Tb927_genome.fasta.gz  ~/Assignment1/bowtie2
gunzip  ~/Assignment1/bowtie2/Tb927_genome.fasta.gz
bowtie2-build ~/Assignment1/bowtie2/Tb927_genome.fasta genomefa

# align the read pairs with bowtie2, convert the output to indexed"bam"with samtools
for filegz1 in ~/Assignment1/fastq/*1.fq.gz
do
filename1=${filegz1%_*}
for filegz2 in ~/Assignment1/fastq/*2.fq.gz
do
filename2=${filegz2%_*}
if (filename1==filename2)
then
bowtie2 -p 10 -x genomefa -1 $filegz1 -2 $filegz2 | samtools sort  > "$filename1".sort.bam
samtools index   "$filename1".sort.bam
fi
done
done

#use the bedtools and bedfile,generate the data
for data in ~/Assignment1/fastq/*.bam
do
filename=${data%_*}
bedtools multicov -bams $data -bed  /localdisk/data/BPSM/Assignment1/Tbbgenes.bed  > "$filename".out
done

#put the output file into the two differernt group,slender and stumpy,and there are both 3 files in the two groups
slender=($(awk '{if($2=="Slender"){print $1;}}' ~/Assignment1/fastq/fqfiles))
stumpy=($(awk '{if($2=="Stumpy"){print $1;}}' ~/Assignment1/fastq/fqfiles))
c1=${#slender[*]}
c2=${#stumpy[*]}
#extract the slender data from the output and calculate the average of the slender
for slender in ${slender[*]}
do
a=($(awk '{print $7;}' ~/Assignment1/fastq/"${slender}".out));
for((i=0;i<${#a[*]};i++))
do
let totalslender[i]+=${a[i]};
let average1[i]=totalslender[i]/c1;
done
done
#extract the stumpy data from the output and calculate the average of the stumpy

for stumpy in ${stumpy[*]}
do
a2=($(awk '{print $7;}' ~/Assignment1/fastq/"${stumpy}".out));
for((i=0;i<${#a2[*]};i++))
do
let totalstumpy[i]+=${a2[i]};
let average2[i]=totalstumpy[i]/c2;
done
done

#extract the genename from the file, and write the genename,average into the statistica.txt.

genename=($(awk '{print $4;}' ~/Assignment1/fastq/"${stumpy}".out));
echo -e "genename\tslendermean\tstumpymean\t">statistical.txt
for((i=0;i<${#genename[*]};i++))
do
echo -e "${genename[i]}\t${average1[i]}\t${average2[i]}\t" >>statistical.txt
done

